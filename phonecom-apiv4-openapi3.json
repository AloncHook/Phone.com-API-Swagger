{
  "openapi": "3.0.0",
  "info": {
    "title": "Phone.com API",
    "description": "This is a Phone.com api Swagger definition",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.phone.com/v4",
      "variables": {}
    }
  ],
  "paths": {
    "/accounts/{account_id}/calls": {
      "post": {
        "tags": [
          "calls"
        ],
        "summary": "create-account-call",
        "description": "Make a phone call",
        "operationId": "CreateAccountCall",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Call data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Call data",
                "$ref": "#/components/schemas/CreateCallParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/CallFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/access-token": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "get-oauth-access-token",
        "description": "Retrieve details of an access token, such as scope, expiration and extension ID.",
        "operationId": "GetOauthAccessToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/GetOauthAccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "create-oauth-access-token",
        "description": "To create an access token via the /oauth/access-token API, an API user may choose any one of the grant types it supports: Authorization Code Grant, Client Credential Grant, Password Credential Grant or Refresh Token Grant.",
        "operationId": "CreateOauthAccessToken",
        "parameters": [],
        "requestBody": {
          "description": "Oauth data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Oauth data",
                "$ref": "#/components/schemas/CreateOauthParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/OauthAccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/authorization": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "create-oauth-authorization",
        "description": "Create Authorization Code or Access Token.",
        "operationId": "CreateOauthAuthorization",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "'token' for Implicit Grant; 'code' for Authorization Code Grant",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "account-owner, extension-user and/or methods:ALL, separated by space (%20)",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The URL where the response data of this API is redirected to",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "list-accounts",
        "description": "Get a list of accounts visible to the authenticated user or client.",
        "operationId": "ListAccounts",
        "parameters": [
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListAccounts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "get-account",
        "description": "Retrieve details of an individual account",
        "operationId": "GetAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/AccountFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/applications": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "list-account-applications",
        "description": "This service lists the Applications on a given account",
        "operationId": "ListAccountApplications",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListApplications"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/applications/{application_id}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "get-account-application",
        "description": "Show details of an individual Application on a given account.",
        "operationId": "GetAccountApplication",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "application_id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ApplicationFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/call-logs": {
      "get": {
        "tags": [
          "call-logs"
        ],
        "summary": "list-account-call-logs",
        "description": "Get a list of call details associated with your account",
        "operationId": "ListAccountCallLogs",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[start_time]",
            "in": "query",
            "description": "Call start time filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[created_at]",
            "in": "query",
            "description": "Call log creation time filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[direction]",
            "in": "query",
            "description": "Call direction filter: in or out",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[called_number]",
            "in": "query",
            "description": "Called number",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[type]",
            "in": "query",
            "description": "Call type, such as 'call', 'fax', 'audiogram'",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[extension]",
            "in": "query",
            "description": "Extension filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[start_time]",
            "in": "query",
            "description": "Sorting by call start time: asc or desc",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[created_at]",
            "in": "query",
            "description": "Sorting by call log creation time: asc or desc",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListCallLogs"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/call-logs/{call_id}": {
      "get": {
        "tags": [
          "call-logs"
        ],
        "summary": "get-account-call-logs",
        "description": "Show details of an individual Call Log entry",
        "operationId": "GetAccountCallLogs",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "call_id",
            "in": "path",
            "description": "Call ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/CallLogFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/devices": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "list-account-devices",
        "description": "Get a list of VoIP devices associated with your account.",
        "operationId": "ListAccountDevices",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListDevices"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "devices"
        ],
        "summary": "create-account-device",
        "description": "Register a generic VoIP device.",
        "operationId": "CreateAccountDevice",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Device data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Device data",
                "$ref": "#/components/schemas/CreateDeviceParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/DeviceFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/devices/{device_id}": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "get-account-device",
        "description": "Show details of an individual VoIP device.",
        "operationId": "GetAccountDevice",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "device_id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeviceFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "devices"
        ],
        "summary": "replace-account-device",
        "description": "Update the details of an individual VoIP device.",
        "operationId": "ReplaceAccountDevice",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "device_id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Device data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Device data",
                "$ref": "#/components/schemas/CreateDeviceParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeviceFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "devices"
        ],
        "summary": "delete-account-device",
        "description": "Delete a VoIP device.",
        "operationId": "DeleteAccountDevice",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "device_id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/listeners": {
      "get": {
        "tags": [
          "listeners"
        ],
        "summary": "list-account-listeners",
        "description": "Get a list of listeners for an account.",
        "operationId": "ListAccountListeners",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListListeners"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "listeners"
        ],
        "summary": "create-account-listener",
        "description": "Add a listener object to your account that can be used to subscribe an event.",
        "operationId": "CreateAccountListener",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Account Listeners Data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Account Listeners Data",
                "$ref": "#/components/schemas/CreateListenerParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/ListenerFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/listeners/{listener_id}": {
      "get": {
        "tags": [
          "listeners"
        ],
        "summary": "get-account-listener",
        "description": "Show details of an individual listener.",
        "operationId": "GetAccountListener",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "listener_id",
            "in": "path",
            "description": "Listener ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "listeners"
        ],
        "summary": "replace-account-listener",
        "description": "Update the settings of an individual event listener.",
        "operationId": "ReplaceAccountListener",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "listener_id",
            "in": "path",
            "description": "Listener ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Account Listeners Data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Account Listeners Data",
                "$ref": "#/components/schemas/CreateListenerParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "listeners"
        ],
        "summary": "delete-account-listener",
        "description": "Delete an individual event listener.",
        "operationId": "DeleteAccountListener",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "listener_id",
            "in": "path",
            "description": "Listener ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/express-service-codes": {
      "get": {
        "tags": [
          "express-service-codes"
        ],
        "summary": "list-account-express-srv-codes",
        "description": "Get the Express Service Code associated with your account in list format.",
        "operationId": "ListAccountExpressSrvCodes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListExpressServiceCodes"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/express-service-codes/{code_id}": {
      "get": {
        "tags": [
          "express-service-codes"
        ],
        "summary": "get-account-express-srv-code",
        "description": "Show details of an account Express Service Code",
        "operationId": "GetAccountExpressSrvCode",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "code_id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ExpressServiceCodeFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions": {
      "get": {
        "tags": [
          "extensions"
        ],
        "summary": "list-account-extensions",
        "description": "Get a list of extensions visible to the authenticated user or client.",
        "operationId": "ListAccountExtensions",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[extension]",
            "in": "query",
            "description": "Extension filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[extension]",
            "in": "query",
            "description": "Extension sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListExtensions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "extensions"
        ],
        "summary": "create-account-extension",
        "description": "Create an individual extension.",
        "operationId": "CreateAccountExtension",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Account Extensions Data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Account Extensions Data",
                "$ref": "#/components/schemas/CreateExtensionParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/ExtensionFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}": {
      "get": {
        "tags": [
          "extensions"
        ],
        "summary": "get-account-extension",
        "description": "Show details of an individual extension.",
        "operationId": "GetAccountExtension",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "extensions"
        ],
        "summary": "replace-account-extension",
        "description": "Replace an individual extension.",
        "operationId": "ReplaceAccountExtension",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Account Extensions Data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Account Extensions Data",
                "$ref": "#/components/schemas/ReplaceExtensionParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}/caller-ids": {
      "get": {
        "tags": [
          "caller-ids"
        ],
        "summary": "get-caller-ids",
        "description": "Show the Caller ID options a given extension can use.",
        "operationId": "GetCallerIds",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[number]",
            "in": "query",
            "description": "Number filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[number]",
            "in": "query",
            "description": "Number sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListCallerIds"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "list-account-extension-contacts",
        "description": "Show the Caller ID options a given extension can use.",
        "operationId": "ListAccountExtensionContacts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[group_id]",
            "in": "query",
            "description": "Group filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[updated_at]",
            "in": "query",
            "description": "Updated At filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[updated_at]",
            "in": "query",
            "description": "Updated At sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListContacts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "create-account-extension-contact",
        "description": "Add a new address book contact for an extension.",
        "operationId": "CreateAccountExtensionContact",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Contact data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Contact data",
                "$ref": "#/components/schemas/CreateContactParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/ContactFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}/contacts/{contact_id}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "get-account-extension-contact",
        "description": "Retrieve the details of an address book contact.",
        "operationId": "GetAccountExtensionContact",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ContactFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "contacts"
        ],
        "summary": "replace-account-extension-contact",
        "description": "Update the info of a contact in the address book.",
        "operationId": "ReplaceAccountExtensionContact",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Contact data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Contact data",
                "$ref": "#/components/schemas/CreateContactParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ContactFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "delete-account-extension-contact",
        "description": "Delete a contact from the address book.",
        "operationId": "DeleteAccountExtensionContact",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}/contact-groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "list-account-extension-contact-groups",
        "description": "Show a list of contact groups belonging to an extension.",
        "operationId": "ListAccountExtensionContactGroups",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListGroups"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "create-account-extension-contact-group",
        "description": "Add a new contact group to an account extension.",
        "operationId": "CreateAccountExtensionContactGroup",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Group data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Group data",
                "$ref": "#/components/schemas/CreateGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/GroupFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/extensions/{extension_id}/contact-groups/{group_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "get-account-extension-contact-group",
        "description": "Retrieve the information of a contact group.",
        "operationId": "GetAccountExtensionContactGroup",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/GroupFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "replace-account-extension-contact-group",
        "description": "Update the information of a contact group.",
        "operationId": "ReplaceAccountExtensionContactGroup",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Group data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Group data",
                "$ref": "#/components/schemas/CreateGroupParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/GroupFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "delete-account-extension-contact-group",
        "description": "Delete a contact group from the address book.",
        "operationId": "DeleteAccountExtensionContactGroup",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extension_id",
            "in": "path",
            "description": "Extension ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "list-account-media",
        "description": "Get a list of media recordings for an account.",
        "operationId": "ListAccountMedia",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListMedia"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media/files": {
      "post": {
        "tags": [
          "media"
        ],
        "summary": "create-account-media-files",
        "description": "Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)",
        "operationId": "CreateAccountMediaFiles",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json",
            "in": "query",
            "description": "Media extra parameters",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Media file",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/MediaFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media/tts": {
      "post": {
        "tags": [
          "media"
        ],
        "summary": "create-account-media-tts",
        "description": "Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)",
        "operationId": "CreateAccountMediaTts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Media data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Media data",
                "$ref": "#/components/schemas/CreateMediaParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/MediaFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media/files/{media_id}": {
      "put": {
        "tags": [
          "media"
        ],
        "summary": "replace-account-media-files",
        "description": "Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB.",
        "operationId": "ReplaceAccountMediaFiles",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "media_id",
            "in": "path",
            "description": "Media ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json",
            "in": "query",
            "description": "Media extra parameters",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Media file",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Replaced",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Replaced",
                  "$ref": "#/components/schemas/MediaFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media/tts/{media_id}": {
      "put": {
        "tags": [
          "media"
        ],
        "summary": "replace-account-media-tts",
        "description": "Update a media object to your account.",
        "operationId": "ReplaceAccountMediaTts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "media_id",
            "in": "path",
            "description": "Media ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Media data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Media data",
                "$ref": "#/components/schemas/CreateMediaParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Replaced",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Replaced",
                  "$ref": "#/components/schemas/MediaFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/media/{media_id}": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "get-account-media",
        "description": "Show details of an individual media recording (Greeting or Hold Music)",
        "operationId": "GetAccountMedia",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "media_id",
            "in": "path",
            "description": "Media ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/MediaFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "media"
        ],
        "summary": "delete-account-media",
        "description": "Delete an individual media record",
        "operationId": "DeleteAccountMedia",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "media_id",
            "in": "path",
            "description": "Media ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/menus": {
      "get": {
        "tags": [
          "menus"
        ],
        "summary": "list-account-menus",
        "description": "Get a list of menus for an account.",
        "operationId": "ListAccountMenus",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListMenus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "menus"
        ],
        "summary": "create-account-menu",
        "description": "Create an individual menu.",
        "operationId": "CreateAccountMenu",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Menu data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Menu data",
                "$ref": "#/components/schemas/CreateMenuParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/MenuFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/menus/{menu_id}": {
      "get": {
        "tags": [
          "menus"
        ],
        "summary": "get-account-menu",
        "description": "Show details of an individual menu.",
        "operationId": "GetAccountMenu",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "menu_id",
            "in": "path",
            "description": "Menu ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/MenuFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "menus"
        ],
        "summary": "replace-account-menu",
        "description": "Replace an individual menu.",
        "operationId": "ReplaceAccountMenu",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "menu_id",
            "in": "path",
            "description": "Menu ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Menu data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Menu data",
                "$ref": "#/components/schemas/ReplaceMenuParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/MenuFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "menus"
        ],
        "summary": "delete-account-menu",
        "description": "Delete an individual menu.",
        "operationId": "DeleteAccountMenu",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "menu_id",
            "in": "path",
            "description": "Menu ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/oauth/clients": {
      "get": {
        "tags": [
          "oauth-clients"
        ],
        "summary": "list-account-oauth-clients",
        "description": "Get a list of OAuth clients for an account.",
        "operationId": "ListAccountOauthClients",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListOauthClients"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/oauth/clients/{client_id}": {
      "get": {
        "tags": [
          "oauth-clients"
        ],
        "summary": "get-account-oauth-client",
        "description": "Show details of an individual OAuth client.",
        "operationId": "GetAccountOauthClient",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/OauthClientFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "oauth-clients"
        ],
        "summary": "delete-account-oauth-client",
        "description": "Delete an individual OAuth client.",
        "operationId": "DeleteAccountOauthClient",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/oauth/clients/{client_id}/redirect-uris": {
      "get": {
        "tags": [
          "oauth-clients-redirect-uris"
        ],
        "summary": "list-account-oauth-clients-redirect-uris",
        "description": "Get a list of OAuth Client Redirect URIs for an account.",
        "operationId": "ListAccountOauthClientsRedirectUris",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListOauthClientsRedirectUris"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "oauth-clients-redirect-uris"
        ],
        "summary": "create-account-oauth-clients-redirect-uri",
        "description": "Create an OAuth Client Redirect URI record.",
        "operationId": "CreateAccountOauthClientsRedirectUri",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Redirect Uri data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Redirect Uri data",
                "$ref": "#/components/schemas/CreateRedirectUriParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/OauthClientRedirectUriFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/oauth/clients/{client_id}/redirect-uris/{uri_id}": {
      "get": {
        "tags": [
          "oauth-clients-redirect-uris"
        ],
        "summary": "get-account-oauth-clients-redirect-uri",
        "description": "Get details of an OAuth Client Redirect URI record.",
        "operationId": "GetAccountOauthClientsRedirectUri",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uri_id",
            "in": "path",
            "description": "Redirect URI ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/OauthClientRedirectUriFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "oauth-clients-redirect-uris"
        ],
        "summary": "delete-account-oauth-clients-redirect-uri",
        "description": "Delete an OAuth Client Redirect URI record.",
        "operationId": "DeleteAccountOauthClientsRedirectUri",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uri_id",
            "in": "path",
            "description": "Redirect URI ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/payment-methods": {
      "get": {
        "tags": [
          "payment-methods"
        ],
        "summary": "list-account-payment-methods",
        "description": "Get a list of payment methods for an account.",
        "operationId": "ListAccountPaymentMethods",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListPaymentMethods"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "payment-methods"
        ],
        "summary": "create-account-payment-method",
        "description": "Create an individual payment method.",
        "operationId": "CreateAccountPaymentMethod",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Payment data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Payment data",
                "$ref": "#/components/schemas/CreatePaymentParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/PaymentFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/payment-methods/{pm_id}": {
      "get": {
        "tags": [
          "payment-methods"
        ],
        "summary": "get-account-payment-method",
        "description": "Show details of an individual payment method.",
        "operationId": "GetAccountPaymentMethod",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pm_id",
            "in": "path",
            "description": "Payment Method ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PaymentFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "payment-methods"
        ],
        "summary": "delete-account-payment-method",
        "description": "Delete an individual payment method.",
        "operationId": "DeleteAccountPaymentMethod",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pm_id",
            "in": "path",
            "description": "Payment Method ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "payment-methods"
        ],
        "summary": "patch-account-payment-method",
        "description": "Replace the status of an individual payment method.",
        "operationId": "PatchAccountPaymentMethod",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pm_id",
            "in": "path",
            "description": "Payment Method ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Payment data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Payment data",
                "$ref": "#/components/schemas/PatchPaymentParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PaymentFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/phone-numbers": {
      "get": {
        "tags": [
          "phone-numbers"
        ],
        "summary": "list-account-phone-numbers",
        "description": "Get a list of phone numbers registered to an account.",
        "operationId": "ListAccountPhoneNumbers",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[phone_number]",
            "in": "query",
            "description": "Phone number filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[phone_number]",
            "in": "query",
            "description": "Phone number sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListPhoneNumbers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "phone-numbers"
        ],
        "summary": "create-account-phone-number",
        "description": "Add a phone number to an account.",
        "operationId": "CreateAccountPhoneNumber",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Phone Number data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Phone Number data",
                "$ref": "#/components/schemas/CreatePhoneNumberParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/PhoneNumberFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/phone-numbers/{number_id}": {
      "get": {
        "tags": [
          "phone-numbers"
        ],
        "summary": "get-account-phone-number",
        "description": "Show details of an individual phone number.",
        "operationId": "GetAccountPhoneNumber",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "number_id",
            "in": "path",
            "description": "Number ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PhoneNumberFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "phone-numbers"
        ],
        "summary": "replace-account-phone-number",
        "description": "Update the settings for an existing phone number on your account.",
        "operationId": "ReplaceAccountPhoneNumber",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "number_id",
            "in": "path",
            "description": "Number ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Phone Number data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Phone Number data",
                "$ref": "#/components/schemas/ReplacePhoneNumberParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PhoneNumberFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/queues": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "list-account-queues",
        "description": "Get a list of queues for an account.",
        "operationId": "ListAccountQueues",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListQueues"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "queues"
        ],
        "summary": "create-account-queue",
        "description": "Create a queue.",
        "operationId": "CreateAccountQueue",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Queue data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Queue data",
                "$ref": "#/components/schemas/CreateQueueParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/QueueFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/queues/{queue_id}": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "get-account-queue",
        "description": "Show details of an individual queue.",
        "operationId": "GetAccountQueue",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "Queue ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/QueueFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "queues"
        ],
        "summary": "replace-account-queue",
        "description": "Replace a queue.",
        "operationId": "ReplaceAccountQueue",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "Queue ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Queue data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Queue data",
                "$ref": "#/components/schemas/CreateQueueParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/QueueFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "queues"
        ],
        "summary": "delete-account-queue",
        "description": "Delete a queue.",
        "operationId": "DeleteAccountQueue",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "Queue ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/routes": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "list-account-routes",
        "description": "Get a list of routes for an account.",
        "operationId": "ListAccountRoutes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListRoutes"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "routes"
        ],
        "summary": "create-route",
        "description": "Add a new route to the account.",
        "operationId": "CreateRoute",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Route data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Route data",
                "$ref": "#/components/schemas/CreateRouteParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/RouteFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/routes/{route_id}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "get-account-route",
        "description": "Show details of an individual route.",
        "operationId": "GetAccountRoute",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "route_id",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/RouteFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "routes"
        ],
        "summary": "replace-account-route",
        "description": "Update the information of a route.",
        "operationId": "ReplaceAccountRoute",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "route_id",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Route data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Route data",
                "$ref": "#/components/schemas/CreateRouteParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/RouteFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "routes"
        ],
        "summary": "delete-account-route",
        "description": "Delete a route from the account.",
        "operationId": "DeleteAccountRoute",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "route_id",
            "in": "path",
            "description": "Route ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/schedules": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "list-account-schedules",
        "description": "Get a list of schedules for an account",
        "operationId": "ListAccountSchedules",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListSchedules"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/schedules/{schedule_id}": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "get-account-schedule",
        "description": "Show details of an individual schedule",
        "operationId": "GetAccountSchedule",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "schedule_id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ScheduleFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/sms": {
      "get": {
        "tags": [
          "sms"
        ],
        "summary": "list-account-sms",
        "description": "Get a list of SMS messages for an account.",
        "operationId": "ListAccountSms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[from]",
            "in": "query",
            "description": "Caller ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[to]",
            "in": "query",
            "description": "Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[direction]",
            "in": "query",
            "description": "Direction filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[extension]",
            "in": "query",
            "description": "Extension filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[created_at]",
            "in": "query",
            "description": "Date string representing the UTC time that sms was created",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[created_at]",
            "in": "query",
            "description": "Sort by created time of message",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListSms"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "sms"
        ],
        "summary": "create-account-sms",
        "description": "Send a SMS to one or a group of recipients.",
        "operationId": "CreateAccountSms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SMS data",
          "content": {
            "application/json": {
              "schema": {
                "description": "SMS data",
                "$ref": "#/components/schemas/CreateSmsParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/SmsFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          },
          "429": {
            "description": "Rate Limit Reached"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/sms/{sms_id}": {
      "get": {
        "tags": [
          "sms"
        ],
        "summary": "get-account-sms",
        "description": "This service shows the details of an individual SMS.",
        "operationId": "GetAccountSms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sms_id",
            "in": "path",
            "description": "SMS ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "sms"
        ],
        "summary": "patch-account-sms",
        "description": "Update the is_new parameter in a sms record.",
        "operationId": "PatchAccountSms",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sms_id",
            "in": "path",
            "description": "SMS ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Sms data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Sms data",
                "$ref": "#/components/schemas/PatchSmsParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/subaccounts": {
      "get": {
        "tags": [
          "subaccounts"
        ],
        "summary": "list-account-subaccounts",
        "description": "Get a list of subaccounts for the authenticated user or client",
        "operationId": "ListAccountSubaccounts",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListAccounts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "subaccounts"
        ],
        "summary": "create-account-subaccount",
        "description": "Add a subaccount for the authenticated user or client",
        "operationId": "CreateAccountSubaccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Subaccount data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Subaccount data",
                "$ref": "#/components/schemas/CreateSubaccountParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/AccountFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/trunks": {
      "get": {
        "tags": [
          "trunks"
        ],
        "summary": "list-account-trunks",
        "description": "Get a list of trunks for an account.",
        "operationId": "ListAccountTrunks",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[name]",
            "in": "query",
            "description": "Name filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Name sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListTrunks"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "trunks"
        ],
        "summary": "create-account-trunk",
        "description": "Add a trunk record with SIP information.",
        "operationId": "CreateAccountTrunk",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Trunk data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Trunk data",
                "$ref": "#/components/schemas/CreateTrunkParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/TrunkFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/trunks/{trunk_id}": {
      "get": {
        "tags": [
          "trunks"
        ],
        "summary": "get-account-trunk",
        "description": "Show details of an individual trunk.",
        "operationId": "GetAccountTrunk",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "trunk_id",
            "in": "path",
            "description": "Trunk ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/TrunkFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "trunks"
        ],
        "summary": "replace-account-trunk",
        "description": "Replace parameters in a trunk.",
        "operationId": "ReplaceAccountTrunk",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "trunk_id",
            "in": "path",
            "description": "Trunk ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Trunk data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Trunk data",
                "$ref": "#/components/schemas/CreateTrunkParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/TrunkFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "trunks"
        ],
        "summary": "delete-account-trunk",
        "description": "Delete a trunk from account.",
        "operationId": "DeleteAccountTrunk",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "trunk_id",
            "in": "path",
            "description": "Trunk ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/voicemail": {
      "get": {
        "tags": [
          "voicemail"
        ],
        "summary": "list-account-voicemail",
        "description": "Get a list of voicemail messages for an account.",
        "operationId": "ListAccountVoicemail",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[from]",
            "in": "query",
            "description": "Caller ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[to]",
            "in": "query",
            "description": "Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[is_new]",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters[created_at]",
            "in": "query",
            "description": "Date string representing the UTC time that sms was created",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters[extension]",
            "in": "query",
            "description": "Extension filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[created_at]",
            "in": "query",
            "description": "Sort by the UTC time that voicemail was created",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListVoicemail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/voicemail/{voicemail_id}": {
      "get": {
        "tags": [
          "voicemail"
        ],
        "summary": "get-account-voicemail",
        "description": "This service shows the details of an individual voicemail.",
        "operationId": "GetAccountVoicemail",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "voicemail_id",
            "in": "path",
            "description": "Voicemail ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/VoicemailFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "voicemail"
        ],
        "summary": "patch-account-voicemail",
        "description": "Update the is_new parameter in a voicemail record.",
        "operationId": "PatchAccountVoicemail",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "voicemail_id",
            "in": "path",
            "description": "Voicemail ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Payment data",
                "$ref": "#/components/schemas/PatchVoicemailParams"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/VoicemailFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/phone-numbers/available": {
      "get": {
        "tags": [
          "available-numbers"
        ],
        "summary": "list-available-phone-numbers",
        "description": "",
        "operationId": "ListAvailablePhoneNumbers",
        "parameters": [
          {
            "name": "filters[phone_number]",
            "in": "query",
            "description": "Phone number filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[country_code]",
            "in": "query",
            "description": "Country Code filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[npa]",
            "in": "query",
            "description": "Area Code filter (North America only)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[nxx]",
            "in": "query",
            "description": "2nd set of 3 digits filter (North America only)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[xxxx]",
            "in": "query",
            "description": "NANP XXXX filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[city]",
            "in": "query",
            "description": "City filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[province]",
            "in": "query",
            "description": "State or Province (postal code) filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[country]",
            "in": "query",
            "description": "Country (postal code) filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[price]",
            "in": "query",
            "description": "Price filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[category]",
            "in": "query",
            "description": "Category filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[internal]",
            "in": "query",
            "description": "Internal (quasi-random) sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[price]",
            "in": "query",
            "description": "Price sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[phone_number]",
            "in": "query",
            "description": "Phone number sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListAvailableNumbers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "429": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/phone-numbers/available/regions": {
      "get": {
        "tags": [
          "number-regions"
        ],
        "summary": "list-available-phone-number-regions",
        "description": "This service lists the quantities of available phone numbers by region.",
        "operationId": "ListAvailablePhoneNumberRegions",
        "parameters": [
          {
            "name": "filters[country_code]",
            "in": "query",
            "description": "Country Code filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[npa]",
            "in": "query",
            "description": "Area Code filter (North America only)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[nxx]",
            "in": "query",
            "description": "2nd set of 3 digits filter (North America only)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[is_toll_free]",
            "in": "query",
            "description": "Toll-free status filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[city]",
            "in": "query",
            "description": "City filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[province_postal_code]",
            "in": "query",
            "description": "State or Province filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filters[country_postal_code]",
            "in": "query",
            "description": "Country filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[country_code]",
            "in": "query",
            "description": "International calling code sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[npa]",
            "in": "query",
            "description": "Area Code sorting (North America only)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[nxx]",
            "in": "query",
            "description": "2nd set of 3 digits sorting (North America)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[is_toll_free]",
            "in": "query",
            "description": "Toll Free status sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[city]",
            "in": "query",
            "description": "City sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[province_postal_code]",
            "in": "query",
            "description": "State or Province sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[country_postal_code]",
            "in": "query",
            "description": "Country sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "description": "Fields to group by (supports the same set of fields as the filters and sorting)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListPhoneNumbersRegions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "429": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "ping",
        "description": "The default API command",
        "operationId": "Ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing": {
      "get": {
        "tags": [
          "subaccount-pricing"
        ],
        "summary": "list-account-subaccount-pricing",
        "description": "Get a list of pricing plans for a subaccount.",
        "operationId": "ListAccountSubaccountPricing",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subaccount_id",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters[id]",
            "in": "query",
            "description": "ID filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort[id]",
            "in": "query",
            "description": "ID sorting",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max results",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results to skip",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Field set",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/ListPricings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "subaccount-pricing"
        ],
        "summary": "create-account-subaccount-pricing",
        "description": "Add a pricing plan to a subaccount.",
        "operationId": "CreateAccountSubaccountPricing",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subaccount_id",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Subaccount pricing data",
          "content": {
            "application/json": {
              "schema": {
                "description": "Subaccount pricing data",
                "$ref": "#/components/schemas/CreatePricingParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Created",
                  "$ref": "#/components/schemas/PricingFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing/{pricing_id}": {
      "get": {
        "tags": [
          "subaccount-pricing"
        ],
        "summary": "get-account-subaccount-pricing",
        "description": "Get the details of a pricing plan for a subaccount.",
        "operationId": "GetAccountSubaccountPricing",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subaccount_id",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pricing_id",
            "in": "path",
            "description": "Pricing Object ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/PricingFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "subaccount-pricing"
        ],
        "summary": "delete-account-subaccount-pricing",
        "description": "Delete a pricing plan from a subaccount.",
        "operationId": "DeleteAccountSubaccountPricing",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subaccount_id",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pricing_id",
            "in": "path",
            "description": "Pricing Object ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "$ref": "#/components/schemas/DeleteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false,
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOauthParams": {
        "title": "CreateOauthParams",
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "authorization_code, client_credentials, password or refresh_token"
          },
          "client_id": {
            "type": "string",
            "description": "Client ID"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret Key"
          },
          "code": {
            "type": "string",
            "description": "Authorization Code created via the /oauth/authorization API"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect URI where user enters authentication information"
          },
          "scope": {
            "type": "string",
            "description": "account-owner, extension-user and/or methods:ALL, separated by space (%20)"
          },
          "username": {
            "type": "string",
            "description": "User name"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token"
          }
        }
      },
      "CreateCallParams": {
        "title": "CreateCallParams",
        "type": "object",
        "properties": {
          "caller_phone_number": {
            "type": "string",
            "description": "Caller phone number in E.164 format"
          },
          "caller_extension": {
            "type": "integer",
            "description": "Caller Extension ID",
            "format": "int32"
          },
          "caller_caller_id": {
            "type": "string",
            "description": "Caller caller ID in E.164 format"
          },
          "caller_private": {
            "type": "boolean",
            "description": "Flag to set caller ID to private"
          },
          "callee_phone_number": {
            "type": "string",
            "description": "Callee phone number in E.164 format"
          },
          "callee_extension": {
            "type": "integer",
            "description": "Callee Extension ID",
            "format": "int32"
          },
          "callee_caller_id": {
            "type": "string",
            "description": "Callee caller ID in E.164 format"
          },
          "callee_private": {
            "type": "boolean",
            "description": "Flag to set callee ID to private"
          }
        }
      },
      "PingResponse": {
        "title": "PingResponse",
        "type": "object",
        "properties": {
          "datetime": {
            "type": "string"
          },
          "remote_ip": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "description": "The ping response object."
      },
      "CreateDeviceParams": {
        "title": "CreateDeviceParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Device Name"
          },
          "lines": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of line objects"
          }
        }
      },
      "CreateListenerParams": {
        "title": "CreateListenerParams",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of listener. Must be 'callback'"
          },
          "event_type": {
            "type": "string",
            "description": "Type of event to subscribe. 'call.new', 'call.update', 'call.complete'"
          },
          "callbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallbackObject"
            },
            "description": "Array of Callback Objects."
          }
        }
      },
      "CallbackObject": {
        "title": "CallbackObject",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of webhook, where the event is emitted to. Note: The listener supports both HTTP & HTTPS, we highly recommend that users use HTTPS on all callbacks (with user name and password) to ensure no one may send malicious events pretending to be Phone.com."
          },
          "role": {
            "type": "string",
            "description": "Role of callback: main or backup"
          },
          "verb": {
            "type": "string",
            "description": "HTTP method: get or post"
          },
          "username": {
            "type": "string",
            "description": "Optional user name needed to logon to the webhook URL"
          },
          "password": {
            "type": "string",
            "description": "Optional password needed to logon to the webhook URL"
          },
          "timeout": {
            "type": "integer",
            "description": "Optional : Duration of HTTP response will time out while sending the event to the callback URL. (1 - 10 seconds)",
            "format": "int32"
          }
        }
      },
      "CreateExtensionParams": {
        "title": "CreateExtensionParams",
        "type": "object",
        "properties": {
          "voicemail": {
            "description": "Voicemail Object. See below for details.",
            "$ref": "#/components/schemas/Voicemail"
          },
          "call_notifications": {
            "description": "Call Notifications Object or NULL",
            "$ref": "#/components/schemas/CallNotifications"
          },
          "caller_id": {
            "type": "string",
            "description": "Caller ID"
          },
          "usage_type": {
            "type": "string",
            "description": "Extension type"
          },
          "allows_call_waiting": {
            "type": "boolean",
            "description": "Allows call waiting"
          },
          "extension": {
            "type": "integer",
            "description": "Extension number (auto-generated if empty)",
            "format": "int32"
          },
          "include_in_directory": {
            "type": "boolean",
            "description": "Include in dial-by-name directory"
          },
          "name": {
            "type": "string",
            "description": "Name (auto-generated if empty)"
          },
          "full_name": {
            "type": "string",
            "description": "Contact name"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "name_greeting": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "local_area_code": {
            "type": "integer",
            "description": "Local area code",
            "format": "int32"
          },
          "enable_outbound_calls": {
            "type": "boolean",
            "description": "Enable outgoing calls"
          },
          "enable_call_waiting": {
            "type": "boolean",
            "description": "Enable Call Waiting"
          }
        }
      },
      "Voicemail": {
        "title": "Voicemail",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether voicemail is enabled. Boolean."
          },
          "password": {
            "type": "string",
            "description": "Password for accessing voicemail box. Must be digits only."
          },
          "greeting": {
            "description": "Voicemail Greeting Object. See below for details. Can be set to NULL to reset greeting options.",
            "$ref": "#/components/schemas/Greeting"
          },
          "attachments": {
            "type": "string",
            "description": "If notification emails are being used, this defines the format of the audio attachments. Can be \"wav\" for WAV format, \"mp3\" for MP3 format, or NULL to disable attachments."
          },
          "notifications": {
            "description": "Voicemail Notifications Object. See below for details. Can be set to NULL to disable notifications.",
            "$ref": "#/components/schemas/Notification"
          },
          "transcription": {
            "type": "string",
            "description": "Type of voicemail transcription to use. Can be \"human\" for high-quality manual transcriptions by human operators, \"automated\" for machine-generated transcriptions, or NULL to omit trancriptions. Changing this option will affect your monthly bill. Please see our Control Panel or contact Customer Service for details."
          }
        },
        "description": "Voicemail Object. See below for details."
      },
      "Greeting": {
        "title": "Greeting",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The greeting to play. Can be \"name\" for the name_greeting as described above, \"standard\" for the standard greeting, or \"alternate\" for an alternate greeting. See below for details."
          },
          "alternate": {
            "description": "Greeting to be played when type=\"alternate\". Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "standard": {
            "description": "Greeting to be played when type=\"standard\". Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "enable_leave_message_prompt": {
            "type": "boolean",
            "description": "Whether to prompt the caller with the following words after the voicemail greeting has been played: \"Please leave your message after the tone. When finished, hang up or press the pound key.\" Boolean."
          }
        },
        "description": "Voicemail Greeting Object. See below for details. Can be set to NULL to reset greeting options."
      },
      "MediaSummary": {
        "title": "MediaSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Recording ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of recording"
          }
        },
        "description": "The Recording Summary Object is used to briefly represent a media recording. It can be seen in several places throughout this API. Here are the properties:"
      },
      "Notification": {
        "title": "Notification",
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of email addresses"
          },
          "sms": {
            "type": "string",
            "description": "Phone number capable of receiving SMS messages"
          }
        },
        "description": "The Call Notifications object configures the recipient(s) of notifications when calls are received to this extension."
      },
      "CallNotifications": {
        "title": "CallNotifications",
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of email addresses"
          },
          "sms": {
            "type": "string",
            "description": "A phone number capable of receiving SMS messages"
          }
        },
        "description": "Call Notifications Object or NULL"
      },
      "ReplaceExtensionParams": {
        "title": "ReplaceExtensionParams",
        "type": "object",
        "properties": {
          "voicemail": {
            "description": "Voicemail Object. See below for details.",
            "$ref": "#/components/schemas/Voicemail"
          },
          "call_notifications": {
            "description": "Call Notifications Object or NULL",
            "$ref": "#/components/schemas/CallNotifications"
          },
          "name_greeting": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "name": {
            "type": "string",
            "description": "Name (required)"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "include_in_directory": {
            "type": "boolean",
            "description": "Include in dial-by-name directory"
          },
          "extension": {
            "type": "integer",
            "description": "Extension number (required)",
            "format": "int32"
          },
          "enable_outbound_calls": {
            "type": "boolean",
            "description": "Enable outgoing calls"
          },
          "usage_type": {
            "type": "string",
            "description": "Extension type"
          },
          "full_name": {
            "type": "string",
            "description": "Contact name"
          },
          "enable_call_waiting": {
            "type": "boolean",
            "description": "Enable Call Waiting"
          },
          "caller_id": {
            "type": "string",
            "description": "Caller ID"
          },
          "local_area_code": {
            "type": "integer",
            "description": "Local area code",
            "format": "int32"
          },
          "route": {
            "type": "string",
            "description": "Route object lookup (must belong to this extension)"
          }
        }
      },
      "CreateContactParams": {
        "title": "CreateContactParams",
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First Name"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle Name"
          },
          "last_name": {
            "type": "string",
            "description": "Last Name"
          },
          "prefix": {
            "type": "string",
            "description": "Prefix"
          },
          "phonetic_first_name": {
            "type": "string",
            "description": "Phonetic First Name"
          },
          "phonetic_middle_name": {
            "type": "string",
            "description": "Phonetic Middle Name"
          },
          "phonetic_last_name": {
            "type": "string",
            "description": "Phonetic Last Name"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname"
          },
          "company": {
            "type": "string",
            "description": "Company Name"
          },
          "department": {
            "type": "string",
            "description": "Department Name"
          },
          "job_title": {
            "type": "string",
            "description": "Job Title"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Email Addresses"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Phone Numbers"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Addresses"
          },
          "group": {
            "type": "object",
            "description": "Contact Group"
          }
        }
      },
      "CreateGroupParams": {
        "title": "CreateGroupParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          }
        }
      },
      "CreateMediaParams": {
        "title": "CreateMediaParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of media"
          },
          "origin": {
            "type": "string",
            "description": "'tts', 'file'"
          },
          "type": {
            "type": "string",
            "description": "'hold_music', 'greeting'"
          },
          "tts_voice": {
            "type": "string",
            "description": "'allison', 'amy', 'belle', 'callie', 'callieq', 'dallas', 'damien', 'david', 'designerdave', 'diane', 'diesel', 'dog', 'duchess', 'duncan', 'emily', 'evilgenius', 'frank', 'french-fry', 'gregory', 'isabelle', 'jean-pierre', 'jerkface', 'katrin', 'kayla', 'kidaroo', 'lawrence', 'layo', 'linda', 'marta', 'matthias', 'miguel', 'millie', 'princess', 'ransomnote', 'robin', 'shouty', 'shygirl', 'tamika', 'tophat', 'vittoria', 'vixen', 'vlad', 'walter', 'whispery', 'william', 'wiseguy', 'zach'"
          },
          "tts_text": {
            "type": "string",
            "description": "Text used for text-to-speech conversion, maximum 800 characters"
          },
          "is_temparary": {
            "type": "string",
            "description": "'Y', 'N'. Media file is temporary, will be deleted after a specified period."
          },
          "expiration_date": {
            "type": "integer",
            "description": "If is_temporary is 'Y', media will be deleted after the specified time in seconds",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "Length of media in seconds",
            "format": "int32"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the media object"
          },
          "randomized": {
            "type": "string",
            "description": "'Y', 'N'. Start playing the media file in random location, instead of from the beginning"
          }
        }
      },
      "CreateMenuParams": {
        "title": "CreateMenuParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "greeting": {
            "type": "object"
          },
          "keypress_error": {
            "type": "object"
          },
          "allow_extension_dial": {
            "type": "boolean"
          },
          "keypress_wait_time": {
            "type": "integer",
            "format": "int32"
          },
          "timeout_handler": {
            "type": "object"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": ""
          }
        }
      },
      "ReplaceMenuParams": {
        "title": "ReplaceMenuParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "greeting": {
            "type": "object"
          },
          "keypress_error": {
            "type": "object"
          },
          "allow_extension_dial": {
            "type": "boolean"
          },
          "keypress_wait_time": {
            "type": "integer",
            "format": "int32"
          },
          "timeout_handler": {
            "type": "object"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": ""
          }
        }
      },
      "CreatePaymentParams": {
        "title": "CreatePaymentParams",
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "Name of payment method"
          },
          "status": {
            "type": "string",
            "description": "primary, onfile or hidden"
          },
          "type": {
            "type": "string",
            "description": "Credit Card Type"
          },
          "cc_token": {
            "type": "string",
            "description": "Credit Card Token. Token is obtained by entering credit card info via the Credit Card Entry Form"
          }
        }
      },
      "CreateRedirectUriParams": {
        "title": "CreateRedirectUriParams",
        "type": "object",
        "properties": {
          "redirect_uri": {
            "type": "string",
            "description": "Redirect URI string for use in redirect-based flows such as the authorization code and implicit flows"
          }
        }
      },
      "PatchPaymentParams": {
        "title": "PatchPaymentParams",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "primary, onfile or hidden"
          }
        }
      },
      "CreatePhoneNumberParams": {
        "title": "CreatePhoneNumberParams",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "object",
            "description": "Phone number"
          },
          "route": {
            "type": "object",
            "description": "Route lookup object"
          },
          "name": {
            "type": "string",
            "description": "Phone Name"
          },
          "block_incoming": {
            "type": "boolean",
            "description": "Block incoming calls"
          },
          "block_anonymous": {
            "type": "boolean",
            "description": "Block anonymous calls"
          },
          "caller_id": {
            "description": "Here are all of the properties you can expect for Caller ID objects:",
            "$ref": "#/components/schemas/CallerIdPhoneNumber"
          },
          "sms_forwarding": {
            "description": "SMS Forwarding Object, or NULL",
            "$ref": "#/components/schemas/SmsForwardingParams"
          },
          "call_notifications": {
            "description": "Call Notifications Object or NULL",
            "$ref": "#/components/schemas/CallNotifications"
          }
        }
      },
      "CallerIdPhoneNumber": {
        "title": "CallerIdPhoneNumber",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name that this number will be associated with. Must be no longer than 15 characters, and can only contain English letters, numbers, spaces, and commas."
          },
          "type": {
            "type": "string",
            "description": "Can be \"business\" or \"personal\""
          }
        },
        "description": "Here are all of the properties you can expect for Caller ID objects:"
      },
      "SmsForwardingParams": {
        "title": "SmsForwardingParams",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Can be \"extension\" or \"application\""
          },
          "extension": {
            "type": "integer",
            "description": "Required if type = \"extension\". Extension that messages should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.",
            "format": "int32"
          },
          "application": {
            "type": "integer",
            "description": "Required if type = \"application\". Application that messages should be directed to. Output is an Application Summary Object. Input must be an Application Lookup Object.",
            "format": "int32"
          }
        },
        "description": "SMS Forwarding Object, or NULL"
      },
      "ReplacePhoneNumberParams": {
        "title": "ReplacePhoneNumberParams",
        "type": "object",
        "properties": {
          "route": {
            "type": "object",
            "description": "Route lookup object"
          },
          "name": {
            "type": "string",
            "description": "Phone Name"
          },
          "block_incoming": {
            "type": "boolean",
            "description": "Block incoming calls"
          },
          "block_anonymous": {
            "type": "boolean",
            "description": "Block anonymous calls"
          },
          "caller_id": {
            "description": "Here are all of the properties you can expect for Caller ID objects:",
            "$ref": "#/components/schemas/CallerIdPhoneNumber"
          },
          "sms_forwarding": {
            "description": "SMS Forwarding Object, or NULL",
            "$ref": "#/components/schemas/SmsForwardingParams"
          },
          "pool_item": {
            "type": "object",
            "description": "Pool lookup object"
          },
          "call_notifications": {
            "description": "Call Notifications Object or NULL",
            "$ref": "#/components/schemas/CallNotifications"
          }
        }
      },
      "CreateQueueParams": {
        "title": "CreateQueueParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of queue"
          },
          "greeting": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "hold_music": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "max_hold_time": {
            "type": "integer",
            "description": "Max seconds for hold",
            "format": "int32"
          },
          "caller_id_type": {
            "type": "string",
            "description": "Type of caller id"
          },
          "ring_time": {
            "type": "integer",
            "description": "Number of seconds to ring each member",
            "format": "int32"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Extensions or phone numbers"
          }
        }
      },
      "CreateRouteParams": {
        "title": "CreateRouteParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rule Sets"
          },
          "extension": {
            "type": "object",
            "description": "Extension Reference"
          }
        }
      },
      "CreateSmsParams": {
        "title": "CreateSmsParams",
        "required": [
          "from",
          "to",
          "text"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number of sender"
          },
          "to": {
            "type": "string",
            "description": "Outgoing destination numbers"
          },
          "text": {
            "type": "string",
            "description": "Text body of the outgoing SMS message. Maximum 160 characters per message."
          },
          "extension_id": {
            "type": "integer",
            "description": "ID of Extension where the sms is saved",
            "format": "int32"
          }
        }
      },
      "PatchSmsParams": {
        "title": "PatchSmsParams",
        "type": "object",
        "properties": {
          "is_new": {
            "type": "boolean",
            "description": "Status of SMS"
          }
        }
      },
      "CreateSubaccountParams": {
        "title": "CreateSubaccountParams",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Sub account password"
          },
          "password": {
            "type": "string",
            "description": "Sub account password"
          },
          "contact": {
            "description": "Contact Object. See below for details.",
            "$ref": "#/components/schemas/ContactResponse"
          },
          "billing_contact": {
            "description": "Contact Object for billing purposes. See below for details.",
            "$ref": "#/components/schemas/ContactResponse"
          }
        }
      },
      "ContactResponse": {
        "title": "ContactResponse",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Contact name"
          },
          "address": {
            "description": "Contact Address Object. See below for details.",
            "$ref": "#/components/schemas/Address"
          },
          "primary_email": {
            "type": "string",
            "description": "Primary email address. Required."
          },
          "alternate_email": {
            "type": "string",
            "description": "Alternate email address"
          },
          "company": {
            "type": "string",
            "description": "Company name"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Required."
          },
          "fax": {
            "type": "string",
            "description": "Fax number"
          }
        }
      },
      "Address": {
        "title": "Address",
        "required": [
          "line_1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "line_1": {
            "type": "string",
            "description": "Street address line 1. Required."
          },
          "city": {
            "type": "string",
            "description": "City. Required."
          },
          "country": {
            "type": "string",
            "description": "2-character country code. Required."
          },
          "line_2": {
            "type": "string",
            "description": "Street address line 2"
          },
          "province": {
            "type": "string",
            "description": "Province. Required if country is US"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code"
          }
        },
        "description": "Contact Address Object. See below for details."
      },
      "CreatePricingParams": {
        "title": "CreatePricingParams",
        "type": "object",
        "properties": {
          "pricing_id": {
            "type": "integer",
            "description": "Pricing plan code",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "description": "Reason this pricing plan is added to the subaccount"
          },
          "expire_date": {
            "type": "integer",
            "description": "Pricing plan expiration time in UNIX format. Disregard or set it to null for plan which never expires",
            "format": "int32"
          }
        }
      },
      "CreateTrunkParams": {
        "title": "CreateTrunkParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Trunk"
          },
          "uri": {
            "type": "string",
            "description": "URI of Trunk (in the form of SIP/user@host.com:port)"
          },
          "max_concurrent_calls": {
            "type": "integer",
            "description": "Max concurrent calls",
            "format": "int32"
          },
          "max_minutes_per_month": {
            "type": "integer",
            "description": "Max minutes per month",
            "format": "int32"
          },
          "greeting": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "error_message": {
            "type": "object",
            "description": "Recording lookup object"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Custom audio codec configuration"
          }
        }
      },
      "PatchVoicemailParams": {
        "title": "PatchVoicemailParams",
        "type": "object",
        "properties": {
          "is_new": {
            "type": "boolean",
            "description": "Status of voicemail"
          }
        }
      },
      "GetOauthAccessToken": {
        "title": "GetOauthAccessToken",
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "expires_at": {
            "type": "integer",
            "format": "int32"
          },
          "scope_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDetails"
            },
            "description": ""
          }
        }
      },
      "ScopeDetails": {
        "title": "ScopeDetails",
        "type": "object",
        "properties": {
          "voip_id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListAccounts": {
        "title": "ListAccounts",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortId"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountFull"
            },
            "description": ""
          }
        }
      },
      "FilterIdArray": {
        "title": "FilterIdArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "SortId": {
        "title": "SortId",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "AccountFull": {
        "title": "AccountFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Account ID. Sometimes referred to as \"Voip ID\" or \"voip_id\".",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name on the account. Read-only."
          },
          "username": {
            "type": "string",
            "description": "Account user name"
          },
          "password": {
            "type": "string",
            "description": "Account password. For security reason, this is masked as \"**\""
          },
          "master_account": {
            "description": "If this account is a subaccount, this property shows the master account that it belongs to. Otherwise it is NULL. Read-only. Output is an Account Summary Object.",
            "$ref": "#/components/schemas/AccountSummary"
          },
          "contact": {
            "description": "Contact Object. See below for details.",
            "$ref": "#/components/schemas/ContactAccount"
          },
          "billing_contact": {
            "description": "Contact Object for billing purposes. See below for details.",
            "$ref": "#/components/schemas/ContactAccount"
          }
        },
        "description": "The Full Account Object includes all of the properties in the Account Summary Object, along with the following:"
      },
      "AccountSummary": {
        "title": "AccountSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Account ID. Sometimes referred to as \"Voip ID\" or \"voip_id\".",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name on the account. Read-only."
          }
        },
        "description": "The Account Summary Object is used to briefly represent an account. It can occur in several places throughout this API. Here are the properties:"
      },
      "ContactAccount": {
        "title": "ContactAccount",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name. Required."
          },
          "company": {
            "type": "string",
            "description": "Company name"
          },
          "address": {
            "description": "Contact Address Object. See below for details.",
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Required."
          },
          "fax": {
            "type": "string",
            "description": "Fax number"
          },
          "primary_email": {
            "type": "string",
            "description": "Primary email address. Required."
          },
          "alternate_email": {
            "type": "string",
            "description": "Alternate email address"
          }
        }
      },
      "ListPricings": {
        "title": "ListPricings",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortId"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingFull"
            },
            "description": ""
          }
        }
      },
      "PricingFull": {
        "title": "PricingFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID of this object.",
            "format": "int32"
          },
          "pricing": {
            "description": "Pricing Object",
            "$ref": "#/components/schemas/PricingObject"
          },
          "voip_id": {
            "type": "integer",
            "description": "Phone.com API Account (VoIP) ID",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "description": "Reason this pricing plan is applied"
          },
          "who": {
            "type": "string",
            "description": "Name of the person / process who added this pricing plan to the subaccount"
          },
          "expire_date": {
            "type": "string",
            "description": "Pricing plan expiration timestamp in unix format. If pricing plan never expires, this item will not be returned"
          }
        },
        "description": "The Full Pricing Object is identical to the Pricing Summary Object. The Pricing Summary Object is used to briefly represent a pricing plan. Here are the properties:"
      },
      "PricingObject": {
        "title": "PricingObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Pricing code / ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of pricing plan"
          }
        }
      },
      "ListApplications": {
        "title": "ListApplications",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationFull"
            },
            "description": ""
          }
        }
      },
      "FilterIdNameArray": {
        "title": "FilterIdNameArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SortIdName": {
        "title": "SortIdName",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApplicationFull": {
        "title": "ApplicationFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Application ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Application name"
          }
        },
        "description": "The Full Application Object is identical to the Application Summary Object. See above for details."
      },
      "ListCallLogs": {
        "title": "ListCallLogs",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterCallLogs"
          },
          "sort": {
            "$ref": "#/components/schemas/SortCallLogs"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallLogFull"
            },
            "description": ""
          }
        }
      },
      "FilterCallLogs": {
        "title": "FilterCallLogs",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "called_number": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SortCallLogs": {
        "title": "SortCallLogs",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "CallLogFull": {
        "title": "CallLogFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID"
          },
          "uuid": {
            "type": "string",
            "description": "Internal system id, may be null"
          },
          "extension": {
            "description": "Account extension",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "caller_id": {
            "type": "string",
            "description": "Call made from this phone number"
          },
          "called_number": {
            "type": "string",
            "description": "Call made to this phone number"
          },
          "start_time": {
            "type": "string",
            "description": "Call start time"
          },
          "created_at": {
            "type": "string",
            "description": "Call log creation time. Same as call end time + time needed to create call log"
          },
          "direction": {
            "type": "string",
            "description": "Call direction: in or out"
          },
          "type": {
            "type": "string",
            "description": "Call type: call, fax, audiogram ..."
          },
          "call_duration": {
            "type": "integer",
            "description": "Call duration in seconds",
            "format": "int32"
          },
          "is_monitored": {
            "type": "string",
            "description": "Was call being monitored?"
          },
          "call_number": {
            "type": "string",
            "description": "Internal system call reference number"
          },
          "final_action": {
            "type": "string",
            "description": "Last action of call flow"
          },
          "voicemail_url": {
            "type": "string",
            "description": "URL of voicemail if available. User may download the audio via this URL. Empty string if voicemail does not exist"
          },
          "voicemail_cp_url": {
            "type": "string",
            "description": "URL of voicemail if available. User may listen to the audio online via this URL. Empty string if voicemail does not exist"
          },
          "voicemail_transcript": {
            "type": "string",
            "description": "Transcript of voicemail if enabled and available"
          },
          "call_recording_url": {
            "type": "string",
            "description": "URL of call recording if available. User may download the audio via this URL. Empty string if call recording does not exist"
          },
          "call_recording_cp_url": {
            "type": "string",
            "description": "URL of call recording if available. User may listen to the audio online via this URL. Empty string if call recording does not exist"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallDetails"
            },
            "description": "A list of call flows from beginning of call to end of call."
          },
          "caller_cnam": {
            "type": "string",
            "description": "Internal system caller id / name"
          }
        },
        "description": "The Full Call Log Object includes the properties in the Call Log Summary Object, along with the following:"
      },
      "ExtensionSummary": {
        "title": "ExtensionSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the extension. This is the internal Phone.com ID, not the extension number callers may dial.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "User-supplied name for the extension. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required."
          },
          "extension": {
            "type": "integer",
            "description": "Extension number that callers may dial. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required.",
            "format": "int32"
          }
        },
        "description": "The Extension Summary Object is used to briefly represent an extension. It can be seen in several places throughout this API. Here are the properties:"
      },
      "CallDetails": {
        "title": "CallDetails",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "integer",
            "description": "UNIX time stamp representing the UTC time that this call item starts",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Endpoint for this call item, such as call, voicemail, fax, menu, menu item, queue ..."
          },
          "id_value": {
            "type": "integer",
            "description": "ID associated with this call item endpoint (type)",
            "format": "int32"
          },
          "voip_id": {
            "type": "integer",
            "description": "Same as account id",
            "format": "int32"
          },
          "voip_phone_id": {
            "type": "integer",
            "description": "Same as account extension id",
            "format": "int32"
          }
        },
        "description": "Each item in the 'details' record may contain the following properties:"
      },
      "ListDevices": {
        "title": "ListDevices",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceFull"
            },
            "description": ""
          }
        }
      },
      "DeviceFull": {
        "title": "DeviceFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "User-supplied name, otherwise NULL"
          },
          "sip_authentication": {
            "description": "A SIP Authentication Properties Object. See below for details. Read-only.",
            "$ref": "#/components/schemas/SipAuthentication"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Line"
            },
            "description": "Array of Line Objects showing which extensions are attached to this device, and their assigned line numbers. See below for details."
          }
        },
        "description": "The Full Device Object includes the properties in the Device Summary Object, along with the following:"
      },
      "SipAuthentication": {
        "title": "SipAuthentication",
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Hostname"
          },
          "port": {
            "type": "integer",
            "description": "Port number",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "Username. This is the ID of the device."
          },
          "password": {
            "type": "string",
            "description": "Password."
          }
        },
        "description": "A SIP Authentication Properties Object. See below for details. Read-only."
      },
      "Line": {
        "title": "Line",
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "Line number",
            "format": "int32"
          },
          "extension": {
            "description": "Extensions object that this line number is mapped to.",
            "$ref": "#/components/schemas/ExtensionSummary"
          }
        }
      },
      "ListListeners": {
        "title": "ListListeners",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortId"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListenerFull"
            },
            "description": ""
          }
        }
      },
      "ListenerFull": {
        "title": "ListenerFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "voip_id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of listener: callback"
          },
          "event_type": {
            "type": "string",
            "description": "Type of event subscribed by the listener: call.new, call.update, call.complete, call.log, sms.in, sms.out"
          },
          "callbacks": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of Callback Object"
          },
          "updated_at": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "The Listener Object is used to represent a listener. Here are the properties:"
      },
      "ListExpressServiceCodes": {
        "title": "ListExpressServiceCodes",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortId"
            },
            "description": ""
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpressServiceCodeFull"
            },
            "description": ""
          }
        }
      },
      "ExpressServiceCodeFull": {
        "title": "ExpressServiceCodeFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32"
          },
          "express_service_code": {
            "type": "string",
            "description": "An 8-digit number in string format"
          },
          "expire_date": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "UNIX time stamp representing the UTC time that the Express Service Code expires. Please note that every time this service is executed, the expire_date is set to now + 24 hours."
          }
        },
        "description": "The Full Express Service Code Object includes the properties in the Express Service Code Summary Object, along with the following:"
      },
      "ListExtensions": {
        "title": "ListExtensions",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdExtensionNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdExtensionName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionFull"
            },
            "description": ""
          }
        }
      },
      "FilterIdExtensionNameArray": {
        "title": "FilterIdExtensionNameArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SortIdExtensionName": {
        "title": "SortIdExtensionName",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ExtensionFull": {
        "title": "ExtensionFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the extension. This is the internal Phone.com ID, not the extension number callers may dial.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "User-supplied name for the extension. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required."
          },
          "extension": {
            "type": "integer",
            "description": "Extension number that callers may dial. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required.",
            "format": "int32"
          },
          "voip_id": {
            "type": "integer",
            "description": "API Account ID. Optional, object may return the voip_id.",
            "format": "int32"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the individual or department to which this extension is assigned"
          },
          "usage_type": {
            "type": "string",
            "description": "Can be \"limited\" or \"unlimited\". In most cases, changing this will affect your monthly bill. Please see our Control Panel or contact Customer Service for pricing."
          },
          "device_membership": {
            "description": "Device Membership Object, or NULL. Read-only. See below for details.",
            "$ref": "#/components/schemas/DeviceMembership"
          },
          "timezone": {
            "type": "string",
            "description": "Time zone. Can be in any commonly recognized format, such as \"America/Los_Angeles\"."
          },
          "name_greeting": {
            "description": "Greeting that communicates the extension's name. Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "include_in_directory": {
            "type": "boolean",
            "description": "Whether this extension should be included in the dial-by-name directory for this account. Boolean."
          },
          "caller_id": {
            "type": "string",
            "description": "Phone number to use as Caller ID for outgoing calls. Must be a phone number belonging to this account, or one of any additional authorized phone numbers. You can use our List Caller Ids service to see a current list. To unassign, you may set this to \"private\", NULL, or an empty string."
          },
          "local_area_code": {
            "type": "string",
            "description": "For outbound calls, this is the North American area code that this extension is calling from."
          },
          "enable_call_waiting": {
            "type": "boolean",
            "description": "Whether Call Waiting is enabled. Boolean. Default is TRUE."
          },
          "enable_outbound_calls": {
            "type": "boolean",
            "description": "Whether outgoing calls are enabled. Boolean. Default is TRUE."
          },
          "voicemail": {
            "description": "Voicemail Object. See below for details.",
            "$ref": "#/components/schemas/Voicemail"
          },
          "call_notifications": {
            "description": "The Call Notifications object configures the recipient(s) of notifications when calls are received to this extension.",
            "$ref": "#/components/schemas/Notification"
          },
          "route": {
            "description": "Route which will handle incoming voice and fax calls. Only valid on PUT requests, not POST. Output is a Route Summary Object if the route is named, otherwise the Full Route Object will be shown. Input must be a Route Lookup Object pointing to a named route. Route must belong to this extension already.",
            "$ref": "#/components/schemas/RouteSummary"
          }
        },
        "description": "The Full Extension Object has the same properties as the Extension Summary Object, along with the following:"
      },
      "DeviceMembership": {
        "title": "DeviceMembership",
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "Line number to which this extension is assigned. Integer.",
            "format": "int32"
          },
          "device": {
            "description": "Device that this extension belongs to. Output is an Device Summary Object.",
            "$ref": "#/components/schemas/DeviceSummary"
          }
        },
        "description": "Device Membership Object, or NULL. Read-only. See below for details."
      },
      "DeviceSummary": {
        "title": "DeviceSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "User-supplied name, otherwise NULL"
          }
        },
        "description": "The Device Summary Object is used to briefly represent a VoIP device. It consists of the ID and name only:"
      },
      "RouteSummary": {
        "title": "RouteSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "The Route Summary Object is used to briefly represent a route. It can be seen in several places throughout this API. Here are the properties:"
      },
      "ListCallerIds": {
        "title": "ListCallerIds",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterNameNumberArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortNameNumber"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallerIdFull"
            },
            "description": ""
          }
        }
      },
      "FilterNameNumberArray": {
        "title": "FilterNameNumberArray",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        }
      },
      "SortNameNumber": {
        "title": "SortNameNumber",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        }
      },
      "CallerIdFull": {
        "title": "CallerIdFull",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Phone number, in E.164 format"
          },
          "name": {
            "type": "string",
            "description": "Name you have supplied for this number"
          },
          "type": {
            "type": "string",
            "description": "Type of Caller ID. account means this number is registered to your account, and extra refers to extra numbers which you have authorized, which are not managed under Phone.com."
          }
        },
        "description": "Here are all of the properties you can expect for Caller ID objects:"
      },
      "ListContacts": {
        "title": "ListContacts",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdGroupIdUpdatedAtArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdUpdatedAt"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactFull"
            },
            "description": ""
          }
        }
      },
      "FilterIdGroupIdUpdatedAtArray": {
        "title": "FilterIdGroupIdUpdatedAtArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "SortIdUpdatedAt": {
        "title": "SortIdUpdatedAt",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "ContactFull": {
        "title": "ContactFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "prefix": {
            "type": "string",
            "description": "Salutation, such as Mr, Mrs, or Dr"
          },
          "first_name": {
            "type": "string",
            "description": "First name or given name"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle or second name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name or surname"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix, such as \"Jr.\", \"Sr.\", \"II\", or \"III\""
          },
          "nickname": {
            "type": "string",
            "description": "Nickname, or a shortened informal version of the contact's name"
          },
          "company": {
            "type": "string",
            "description": "Name of the contact's company"
          },
          "phonetic_first_name": {
            "type": "string",
            "description": "Phonetic first name. Useful for remembering how to pronounce the contact's name."
          },
          "phonetic_middle_name": {
            "type": "string",
            "description": "Phonetic middle name. Useful for remembering how to pronounce the contact's name."
          },
          "phonetic_last_name": {
            "type": "string",
            "description": "Phonetic last name. Useful for remembering how to pronounce the contact's name."
          },
          "department": {
            "type": "string",
            "description": "Name of the contact's department"
          },
          "job_title": {
            "type": "string",
            "description": "Contact's job title"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            },
            "description": "Array of Contact Email Objects. See below for details."
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberContact"
            },
            "description": "Array of Contact Phone Number Objects. See below for details."
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressListContacts"
            },
            "description": "Array of Contact Address Objects. See below for details."
          },
          "group": {
            "description": "Contact Group that this contact is filed under. Output is a Group Summary Object. Input is a Group Lookup Object.",
            "$ref": "#/components/schemas/GroupListContacts"
          },
          "created_at": {
            "type": "integer",
            "description": "Integer UNIX timestamp when the contact was created. Read-only.",
            "format": "int32"
          },
          "updated_at": {
            "type": "integer",
            "description": "Integer UNIX timestamp when the contact was created. Read-only.",
            "format": "int32"
          }
        },
        "description": "The Full Contact Object includes all of the properties in the Contact Summary Object, along with several more:"
      },
      "Email": {
        "title": "Email",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Email type, one of: primary or alternate. Default is primary."
          },
          "email": {
            "type": "string",
            "description": "Email address. Required."
          }
        }
      },
      "PhoneNumberContact": {
        "title": "PhoneNumberContact",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of phone number, must be one of: home, business, mobile, fax, pager. Default is home."
          },
          "number": {
            "type": "string",
            "description": "Phone number, as entered. Does not need to be formatted in any particular way. Required."
          },
          "normalized": {
            "type": "string",
            "description": "Phone number in E.164 format. Read-only."
          }
        }
      },
      "AddressListContacts": {
        "title": "AddressListContacts",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Address type, one of: home or business. Default is home."
          },
          "street": {
            "type": "string",
            "description": "House number and street name, including apartment, suite, etc."
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "description": "State or province"
          },
          "zip": {
            "type": "string",
            "description": "Zip code or postal code"
          },
          "country": {
            "type": "string",
            "description": "Country name"
          }
        }
      },
      "GroupListContacts": {
        "title": "GroupListContacts",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "Contact Group that this contact is filed under. Output is a Group Summary Object. Input is a Group Lookup Object."
      },
      "ListGroups": {
        "title": "ListGroups",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupFull"
            },
            "description": ""
          }
        }
      },
      "GroupFull": {
        "title": "GroupFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "The Full Group Object is identical to the Group Summary Object. See above for details."
      },
      "ListMedia": {
        "title": "ListMedia",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaSummary"
            },
            "description": ""
          }
        }
      },
      "ListMenus": {
        "title": "ListMenus",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuFull"
            },
            "description": ""
          }
        }
      },
      "MenuFull": {
        "title": "MenuFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Menu ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required. Unique."
          },
          "allow_extension_dial": {
            "type": "boolean",
            "description": "Boolean. Determines whether a caller can enter an extension number to bypass the menu."
          },
          "keypress_wait_time": {
            "type": "integer",
            "description": "Number of seconds to wait for the caller to choose a menu option. Must be between 1 and 5 seconds.",
            "format": "int32"
          },
          "greeting": {
            "description": "Greeting that is played when a caller enters a menu. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "keypress_error": {
            "description": "Message that is played when the caller makes a keypress error. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "timeout_handler": {
            "description": "Route that will be entered when the caller fails to choose a menu option within the allotted time. Output is a Route Summary Object if the route is named, otherwise the Full Route Object will be shown. Input must be a Route Lookup Object pointing to a named route.",
            "$ref": "#/components/schemas/RouteSummary"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            },
            "description": "Array of menu option objects. See below for details."
          }
        },
        "description": "The Full Menu Object contains the same properties as the Menu Summary Object, along with the following:"
      },
      "Option": {
        "title": "Option",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Keypad key. Must equal a single digit or the pound sign (\"#\")."
          },
          "route": {
            "description": "Route which will be entered when the user presses the designated key. Output is a Route Summary Object if the route is named, otherwise the Full Route Object will be shown. Input must be a Route Lookup Object pointing to a named route.",
            "$ref": "#/components/schemas/RouteSummary"
          }
        }
      },
      "ListOauthClients": {
        "title": "ListOauthClients",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortId"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthClientFull"
            },
            "description": ""
          }
        }
      },
      "OauthClientFull": {
        "title": "OauthClientFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Client ID",
            "format": "int32"
          },
          "client_name": {
            "type": "string",
            "description": "Name of Client"
          }
        },
        "description": "An OAuth Client Full Object is identical as a Summary Object."
      },
      "ListOauthClientsRedirectUris": {
        "title": "ListOauthClientsRedirectUris",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthClientRedirectUriFull"
            },
            "description": ""
          }
        }
      },
      "OauthClientRedirectUriFull": {
        "title": "OauthClientRedirectUriFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "OAuth Client Redirect URI ID",
            "format": "int32"
          },
          "client": {
            "description": "Client details",
            "$ref": "#/components/schemas/OauthClientFull"
          },
          "redirect_uri": {
            "description": "Redirect URI details",
            "$ref": "#/components/schemas/RedirectUriFull"
          }
        },
        "description": "An OAuth Client Full Object is identical as a Summary Object."
      },
      "RedirectUriFull": {
        "title": "RedirectUriFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Redirect URI ID",
            "format": "int32"
          },
          "uri": {
            "type": "string",
            "description": "The Uniform Resource Identifier is a string used to identify the path to be redirected"
          },
          "type": {
            "type": "string",
            "description": "redirect"
          }
        }
      },
      "ListPaymentMethods": {
        "title": "ListPaymentMethods",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortId"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentFull"
            },
            "description": ""
          }
        }
      },
      "PaymentFull": {
        "title": "PaymentFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Payment Method ID",
            "format": "int32"
          },
          "voip_id": {
            "type": "string",
            "description": "API Account ID"
          },
          "status": {
            "type": "string",
            "description": "'primary' = primary card used for billing; 'onfile' = card on file; 'hidden' = deleted card;"
          },
          "nickname": {
            "type": "string",
            "description": "Name of Card"
          },
          "type": {
            "type": "string",
            "description": "'cc' for credit card"
          },
          "created_at": {
            "type": "integer",
            "description": "Time payment record is created",
            "format": "int32"
          },
          "contact": {
            "description": "Detail of contact person",
            "$ref": "#/components/schemas/ContactResponse"
          },
          "decline_count": {
            "type": "integer",
            "description": "Number of times the payment method was declined",
            "format": "int32"
          },
          "next_charge_date": {
            "type": "integer",
            "description": "Next billing date",
            "format": "int32"
          },
          "updated_at": {
            "type": "integer",
            "description": "Last time the payment method was updated",
            "format": "int32"
          },
          "cc_token": {
            "type": "string",
            "description": "Encrypted credit card token to be used for billing"
          },
          "cc_number": {
            "type": "string",
            "description": "Credit card number partially masked with xxxxxxxx"
          },
          "cc_exp": {
            "type": "string",
            "description": "Credit card expiration date"
          }
        },
        "description": "The Payment Method Full Object contains the same properties as the Payment Method Summary Object, along with the following:"
      },
      "ListPhoneNumbers": {
        "title": "ListPhoneNumbers",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNamePhoneNumberArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdNamePhoneNumber"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberFull"
            },
            "description": "Array of Contact Phone Number Objects. See below for details."
          }
        }
      },
      "FilterIdNamePhoneNumberArray": {
        "title": "FilterIdNamePhoneNumberArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "SortIdNamePhoneNumber": {
        "title": "SortIdNamePhoneNumber",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "PhoneNumberFull": {
        "title": "PhoneNumberFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Phone number ID. This is the internal Phone.com ID for this number, not the phone number itself. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number, in E.164 format"
          },
          "block_incoming": {
            "type": "boolean",
            "description": "Whether to block incoming calls. Boolean."
          },
          "block_anonymous": {
            "type": "boolean",
            "description": "Whether to block anonymous calls. Boolean."
          },
          "route": {
            "description": "The Route assigned to handle incoming calls for this number, if any. Output is a Route Summary Object, or NULL if not set. Input can be a Route Lookup Object or NULL to unset.",
            "$ref": "#/components/schemas/RouteSummary"
          },
          "caller_id": {
            "description": "Here are all of the properties you can expect for Caller ID objects:",
            "$ref": "#/components/schemas/CallerIdPhoneNumber"
          },
          "sms_forwarding": {
            "description": "SMS Forwarding Object, or NULL",
            "$ref": "#/components/schemas/SmsForwarding"
          },
          "call_notifications": {
            "description": "Call Notifications Object or NULL",
            "$ref": "#/components/schemas/CallNotifications"
          }
        },
        "description": "The Full Phone Number Object has all of the properties of the Phone Number Summary Object, along with several more, as shown below:"
      },
      "SmsForwarding": {
        "title": "SmsForwarding",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Can be \"extension\" or \"application\""
          },
          "extension": {
            "description": "Required if type = \"extension\". Extension that messages should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "application": {
            "description": "Required if type = \"application\". Application that messages should be directed to. Output is an Application Summary Object. Input must be an Application Lookup Object.",
            "$ref": "#/components/schemas/ApplicationSummary"
          }
        },
        "description": "SMS Forwarding Object, or NULL"
      },
      "ApplicationSummary": {
        "title": "ApplicationSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Application ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Application name"
          }
        },
        "description": "The Application Summary Object is used to briefly represent an application. It can occur in several places throughout this API. Here are the properties:"
      },
      "ListQueues": {
        "title": "ListQueues",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueFull"
            },
            "description": ""
          }
        }
      },
      "QueueFull": {
        "title": "QueueFull",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required."
          },
          "greeting": {
            "description": "Greeting to be played when caller first connects. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. Can be set to NULL to disable the greeting.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "hold_music": {
            "description": "Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.",
            "$ref": "#/components/schemas/HoldMusic"
          },
          "max_hold_time": {
            "type": "integer",
            "description": "Maximum hold time in seconds. If provided, must equal one of: 60, 120, 180, 240, 300, 600, 900, 1200, 1800, 2700, 3600. Default is 300.",
            "format": "int32"
          },
          "caller_id_type": {
            "type": "string",
            "description": "Caller id type to show members. If provided, must equal one of: 'called_number', 'calling_number'. Default is 'calling_number'."
          },
          "ring_time": {
            "type": "integer",
            "description": "Number of seconds to ring a member before cycling to the next member. If provided, must equal one of: 5, 10, 15, 20, 25, 30. Default is 5.",
            "format": "int32"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "Array of Member Objects. Non-virtual account extensions or phone numbers. See below for details."
          }
        },
        "description": "The Full QueueObject has the same properties as the Queue Summary Object, along with the following:"
      },
      "HoldMusic": {
        "title": "HoldMusic",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Recording ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of recording"
          }
        },
        "description": "Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone."
      },
      "Member": {
        "title": "Member",
        "type": "object",
        "properties": {
          "extension": {
            "description": "Extension that this member refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          }
        }
      },
      "ListRoutes": {
        "title": "ListRoutes",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteFull"
            },
            "description": ""
          }
        }
      },
      "RouteFull": {
        "title": "RouteFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "extension": {
            "description": "Extension to which this route belongs. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Optional. Cannot be changed after a route is created.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleSet"
            },
            "description": "Array of Rule Set Objects. Required. See below for details. When processing incoming calls, the first matching rule set will be used, and all others will be ignored."
          }
        },
        "description": "The root level of the Full Route Object includes all of the properties in the Route Summary Object, along with two more:"
      },
      "RuleSet": {
        "title": "RuleSet",
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filter Object. Optional. See below for details.",
            "$ref": "#/components/schemas/RuleSetFilter"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleSetAction"
            },
            "description": "Array of Action Objects. Required. Routes have rule sets, and rule sets have one or more actions. The supported actions are described below:"
          }
        }
      },
      "RuleSetFilter": {
        "title": "RuleSetFilter",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Required."
          },
          "schedule": {
            "description": "Schedule that this filter refers to. Output is a Schedule Summary Object. Input must be a Schedule Lookup Object. Required.",
            "$ref": "#/components/schemas/ScheduleSummary"
          },
          "contact": {
            "description": "Address Book Contact that this filter refers to. Output is a Contact Summary Object. Input must be a Contact Lookup Object. Required.",
            "$ref": "#/components/schemas/ContactSummary"
          },
          "group": {
            "description": "Address Book Group that this filter refers to. Output is a Contact Group Summary Object. Input must be a Contact Group Lookup Object. Required.",
            "$ref": "#/components/schemas/GroupSummary"
          }
        },
        "description": "Filter Object. Optional. See below for details."
      },
      "ScheduleSummary": {
        "title": "ScheduleSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Schedule ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "The Schedule Summary Object is used to briefly represent a schedule. It can be seen in several places throughout this API. Here are the properties:"
      },
      "ContactSummary": {
        "title": "ContactSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "prefix": {
            "type": "string",
            "description": "Salutation, such as Mr, Mrs, or Dr"
          },
          "first_name": {
            "type": "string",
            "description": "First name or given name"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle or second name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name or surname"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix, such as 'Jr.', 'Sr.', 'II', or 'III'"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname, or a shortened informal version of the contact's name"
          },
          "company": {
            "type": "string",
            "description": "Name of the contact's company"
          }
        },
        "description": "The Contact Summary Object is used to briefly represent a contact from your address book. It can be seen in several places throughout this API. Here are the properties:"
      },
      "GroupSummary": {
        "title": "GroupSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "The Group Summary Object is used to briefly represent a contact group. It can occur in several places throughout this API. Here are the properties:"
      },
      "RuleSetAction": {
        "title": "RuleSetAction",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Required."
          },
          "extension": {
            "description": "Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleSetForwardItem"
            },
            "description": "This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling."
          },
          "timeout": {
            "type": "integer",
            "description": "Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds.",
            "format": "int32",
            "example": 5
          },
          "hold_music": {
            "description": "Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "greeting": {
            "description": "Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "duration": {
            "type": "integer",
            "description": "Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds.",
            "format": "int32"
          },
          "menu": {
            "description": "Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object.",
            "$ref": "#/components/schemas/MenuSummary"
          },
          "queue": {
            "description": "Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object.",
            "$ref": "#/components/schemas/QueueSummary"
          },
          "trunk": {
            "description": "Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object.",
            "$ref": "#/components/schemas/TrunkSummary"
          }
        },
        "description": "Filter Object. Optional. See below for details."
      },
      "RuleSetForwardItem": {
        "title": "RuleSetForwardItem",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Required. Must equal phone_number or extension."
          },
          "extension": {
            "description": "Required if type = \"extension\". Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "number": {
            "type": "string",
            "description": "Required if type = \"phone_number\". Phone number that callers should be directed to. Must be a string in E.164 format."
          },
          "screening": {
            "type": "boolean",
            "description": "Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds.",
            "example": false
          },
          "caller_id": {
            "type": "string",
            "description": "Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number.",
            "example": "calling_number"
          },
          "voice_tag": {
            "type": "string",
            "description": "Optional string. If screening = TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached."
          },
          "distinctive_ring": {
            "type": "string",
            "description": "Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting."
          }
        },
        "description": "Array of Forward Item Objects. See below for details. Required."
      },
      "MenuSummary": {
        "title": "MenuSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Menu ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required. Unique."
          }
        },
        "description": "The Menu Summary Object is used to briefly represent a menu. It can be seen in several places throughout this API. Here are the properties:"
      },
      "QueueSummary": {
        "title": "QueueSummary",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required."
          }
        },
        "description": "The Queue Summary Object is used to briefly represent a calling queue. It can be seen in several places throughout this API. Here are the properties:"
      },
      "TrunkSummary": {
        "title": "TrunkSummary",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Trunk ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required."
          }
        },
        "description": "The Trunk Summary Object is used to briefly represent a trunk. It can be seen in several places throughout this API. Here are the properties:"
      },
      "ListSchedules": {
        "title": "ListSchedules",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleFull"
            },
            "description": ""
          }
        }
      },
      "ScheduleFull": {
        "title": "ScheduleFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Schedule ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "description": "The Full Schedule Object is identical to the Schedule Summary Object. See above for details."
      },
      "ListSms": {
        "title": "ListSms",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdDirectionFrom"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdCreatedAt"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmsFull"
            },
            "description": ""
          }
        }
      },
      "FilterIdDirectionFrom": {
        "title": "FilterIdDirectionFrom",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "from": {
            "type": "string"
          }
        }
      },
      "SortIdCreatedAt": {
        "title": "SortIdCreatedAt",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "SmsFull": {
        "title": "SmsFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SMS ID. Read-only."
          },
          "from": {
            "type": "string",
            "description": "Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account."
          },
          "to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            },
            "description": "An array of SMS recipients."
          },
          "direction": {
            "type": "string",
            "description": "Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages."
          },
          "created_epoch": {
            "type": "integer",
            "description": "Unix time stamp representing the UTC time that the object was created in the Phone.com API system.",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "description": "Date string representing the UTC time that the object was created in the Phone.com API system.",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "description": "Body of the SMS text"
          },
          "is_new": {
            "type": "boolean",
            "description": "True when SMS is new; False when SMS has been read."
          }
        },
        "description": "The Full SMS Object includes all of the properties in the SMS Summary Object."
      },
      "Recipient": {
        "title": "Recipient",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Phone number that will receive the SMS message"
          },
          "status": {
            "type": "string",
            "description": "Indicate the status of your SMS object. May be 'sent', 'received', 'queued', 'new' ..."
          }
        }
      },
      "ListTrunks": {
        "title": "ListTrunks",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterIdNameArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdName"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrunkFull"
            },
            "description": ""
          }
        }
      },
      "TrunkFull": {
        "title": "TrunkFull",
        "required": [
          "id",
          "name",
          "uri",
          "max_concurrent_calls",
          "max_minutes_per_month",
          "greeting",
          "error_message",
          "codecs"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Integer Trunk ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name. Required."
          },
          "uri": {
            "type": "string",
            "description": "Fully-qualified SIP URI. Required."
          },
          "max_concurrent_calls": {
            "type": "integer",
            "description": "Max concurrent calls. Default is 10.",
            "format": "int32"
          },
          "max_minutes_per_month": {
            "type": "integer",
            "description": "Max minutes per month. Default is 750.",
            "format": "int32"
          },
          "greeting": {
            "description": "Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "error_message": {
            "description": "Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.",
            "$ref": "#/components/schemas/MediaSummary"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833"
          }
        },
        "description": "The Full Trunk Object is identical to the Trunk Summary Object, along with the following:"
      },
      "ListVoicemail": {
        "title": "ListVoicemail",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterVoicemailArray"
          },
          "sort": {
            "$ref": "#/components/schemas/SortIdCreatedAt"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoicemailFull"
            },
            "description": ""
          }
        }
      },
      "FilterVoicemailArray": {
        "title": "FilterVoicemailArray",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "is_new": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int32"
          },
          "extension": {
            "type": "string"
          }
        }
      },
      "VoicemailFull": {
        "title": "VoicemailFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Voicemail ID. Read-only."
          },
          "download_url": {
            "type": "string",
            "description": "Name. Required."
          },
          "extension": {
            "description": "Extension where the voicemail is saved into.",
            "$ref": "#/components/schemas/ExtensionSummary"
          },
          "from": {
            "description": "The caller's information",
            "$ref": "#/components/schemas/FromObject"
          },
          "to": {
            "type": "string",
            "description": "The phone number where the caller is calling"
          },
          "is_new": {
            "type": "boolean",
            "description": "True when Voicemail is new; False when Voicemail has been listened"
          },
          "created_at": {
            "type": "integer",
            "description": "Date string representing the UTC time that the object was created in the Phone.com API system.",
            "format": "int32"
          },
          "folder": {
            "type": "string",
            "description": "Folder name where voicemail is saved"
          },
          "duration": {
            "type": "integer",
            "description": "Length of voicemail in seconds",
            "format": "int32"
          }
        },
        "description": "The Full Voicemail Object includes all of the properties in the Voicemail Summary Object."
      },
      "FromObject": {
        "title": "FromObject",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The caller phone number"
          },
          "name": {
            "type": "string",
            "description": "The name / caller ID of the caller"
          },
          "city": {
            "type": "string",
            "description": "The city where the caller is from"
          },
          "state": {
            "type": "string",
            "description": "The state where the caller is from"
          }
        },
        "description": "Each entry in a Voicemail's from list is an object with the following properties:"
      },
      "ListAvailableNumbers": {
        "title": "ListAvailableNumbers",
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/FilterListAvailableNumbers"
          },
          "sort": {
            "$ref": "#/components/schemas/SortListAvailableNumbers"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableNumbersFull"
            },
            "description": ""
          }
        }
      },
      "FilterListAvailableNumbers": {
        "title": "FilterListAvailableNumbers",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "npa": {
            "type": "string"
          },
          "nxx": {
            "type": "string"
          },
          "xxxx": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        }
      },
      "SortListAvailableNumbers": {
        "title": "SortListAvailableNumbers",
        "type": "object",
        "properties": {
          "internal": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "AvailableNumbersFull": {
        "title": "AvailableNumbersFull",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "Phone number, in E.164 format"
          },
          "formatted": {
            "type": "string",
            "description": "Human-readable formatted version of the phone number"
          },
          "price": {
            "type": "integer",
            "description": "The one-time initial price for this number, in USD. Some numbers show REQUEST_QUOTE here. Please contact our sales department if you are interested in these numbers.",
            "format": "int32"
          },
          "is_toll_free": {
            "type": "boolean",
            "description": "Whether the number is toll-free"
          },
          "country_code": {
            "type": "string",
            "description": "The international dialing prefix for this number. For US and Canadian numbers, for example, this will be \"1\"."
          },
          "npa": {
            "type": "string",
            "description": "Area code (a.k.a. NPA). Included for North American numbers only."
          },
          "nxx": {
            "type": "string",
            "description": "Second 3 digits (a.k.a. NXX). Included for North American numbers only."
          },
          "xxxx": {
            "type": "string",
            "description": "Last 4 digits (a.k.a. XXXX). Included for North American numbers only."
          },
          "city": {
            "type": "string",
            "description": "City with which this number is associated, if known. Otherwise NULL."
          },
          "province": {
            "type": "string",
            "description": "State or Province with which this number is associated, if known. Postal Code. Otherwise NULL."
          },
          "country": {
            "type": "string",
            "description": "Country with which this number is associated, if known. Otherwise NULL."
          }
        },
        "description": "The Full Available Phone Number Object includes the properties in the Summary Object, along with the following:"
      },
      "ListPhoneNumbersRegions": {
        "title": "ListPhoneNumbersRegions",
        "type": "object",
        "properties": {
          "group_by": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "filters": {
            "$ref": "#/components/schemas/FilterListPhoneNumbersRegions"
          },
          "sort": {
            "$ref": "#/components/schemas/SortListPhoneNumbersRegions"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersRegionFull"
            },
            "description": ""
          }
        }
      },
      "FilterListPhoneNumbersRegions": {
        "title": "FilterListPhoneNumbersRegions",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "npa": {
            "type": "string"
          },
          "nxx": {
            "type": "string"
          },
          "is_toll_free": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province_postal_code": {
            "type": "string"
          },
          "country_postal_code": {
            "type": "string"
          }
        }
      },
      "SortListPhoneNumbersRegions": {
        "title": "SortListPhoneNumbersRegions",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "npa": {
            "type": "string"
          },
          "nxx": {
            "type": "string"
          },
          "is_toll_free": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province_postal_code": {
            "type": "string"
          },
          "country_postal_code": {
            "type": "string"
          }
        }
      },
      "PhoneNumbersRegionFull": {
        "title": "PhoneNumbersRegionFull",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "Optional. Integer representing the international calling code for the phone number's country."
          },
          "npa": {
            "type": "integer",
            "description": "Optional. Area Code, for North American phone numbers.",
            "format": "int32"
          },
          "nxx": {
            "type": "integer",
            "description": "Optional. Second set of 3 digits, for North American phone numbers.",
            "format": "int32"
          },
          "is_toll_free": {
            "type": "integer",
            "description": "Optional. Boolean describing whether the phone numbers in this group are toll free.",
            "format": "int32"
          },
          "city": {
            "type": "string",
            "description": "Optional. City name."
          },
          "province_postal_code": {
            "type": "string",
            "description": "Optional. Two-letter postal code for the state or province."
          },
          "country_postal_code": {
            "type": "string",
            "description": "Optional. Two-letter postal code for the country."
          },
          "quantity": {
            "type": "integer",
            "description": "Integer. Quantity of phone numbers currently available in the given region.",
            "format": "int32"
          }
        },
        "description": "The Region Object may include any of several fields describing the group, as well as the quantity of phone numbers available in that group. Here are the properties:"
      },
      "OauthAccessToken": {
        "title": "OauthAccessToken",
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CallFull": {
        "title": "CallFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "MediaFull": {
        "title": "MediaFull",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Recording ID. Read-only.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of recording"
          },
          "type": {
            "type": "string",
            "description": "Can be hold_music or greeting. Indicates the purpose of this recording and where it can be used."
          }
        },
        "description": "The Full Recording Object and the Summary Recording Object are the same."
      },
      "PaymentSummary": {
        "title": "PaymentSummary",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Payment Method ID",
            "format": "int32"
          },
          "voip_id": {
            "type": "integer",
            "description": "API Account ID",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "'primary' = primary card used for billing; 'onfile' = card on file; 'hidden' = deleted card;"
          },
          "nickname": {
            "type": "string",
            "description": "Name of Card"
          },
          "type": {
            "type": "string",
            "description": "'cc' for credit card"
          },
          "created_at": {
            "type": "integer",
            "description": "Time payment record is created",
            "format": "int32"
          }
        },
        "description": "The Payment Method Summary Object is used to briefly represent a Credit Card. It consists of parameters in the table below:"
      },
      "DeleteEntry": {
        "title": "DeleteEntry",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "description": "",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}